import { EdgeStoreError, EDGE_STORE_ERROR_CODES } from '@edgestore/shared';
import { L as Logger } from '../../../logger-09f43a75.mjs';
import { EdgeStoreProvider } from '../../../providers/edgestore/index.mjs';
import { i as init, r as requestUpload, a as requestUploadParts, c as completeMultipartUpload, d as confirmUpload, e as deleteFile } from '../../../shared-039276af.mjs';
import '../../../index-28efdacf.mjs';
import '@panva/hkdf';
import 'cookie';
import 'jose';
import 'uuid';

function createEdgeStoreNextHandler(config) {
    const { provider = EdgeStoreProvider() } = config;
    const log = new Logger(config.logLevel);
    globalThis._EDGE_STORE_LOGGER = log;
    log.debug('Creating Edge Store Next handler (app adapter)');
    return async (req)=>{
        try {
            if (!('nextUrl' in req)) throw new EdgeStoreError({
                message: 'Error running the app adapter. Make sure you are importing the correct adapter in your router configuration',
                code: 'SERVER_ERROR'
            });
            if (req.nextUrl.pathname.endsWith('/health')) {
                return new Response('OK', {
                    status: 200
                });
            } else if (req.nextUrl.pathname.endsWith('/init')) {
                let ctx = {};
                try {
                    ctx = 'createContext' in config ? await config.createContext({
                        req
                    }) : {};
                } catch (err) {
                    throw new EdgeStoreError({
                        message: 'Error creating context',
                        code: 'CREATE_CONTEXT_ERROR',
                        cause: err instanceof Error ? err : undefined
                    });
                }
                const { newCookies, token, baseUrl } = await init({
                    ctx,
                    provider,
                    router: config.router
                });
                const res = new Response(JSON.stringify({
                    token,
                    baseUrl
                }), {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                for (const cookie of newCookies){
                    res.headers.append('Set-Cookie', cookie);
                }
                return res;
            } else if (req.nextUrl.pathname.endsWith('/request-upload')) {
                const res = await requestUpload({
                    provider,
                    router: config.router,
                    body: await req.json(),
                    ctxToken: req.cookies.get('edgestore-ctx')?.value
                });
                return new Response(JSON.stringify(res), {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            } else if (req.nextUrl.pathname.endsWith('/request-upload-parts')) {
                const res = await requestUploadParts({
                    provider,
                    router: config.router,
                    body: await req.json(),
                    ctxToken: req.cookies.get('edgestore-ctx')?.value
                });
                return new Response(JSON.stringify(res), {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            } else if (req.nextUrl.pathname.endsWith('/complete-multipart-upload')) {
                await completeMultipartUpload({
                    provider,
                    router: config.router,
                    body: await req.json(),
                    ctxToken: req.cookies.get('edgestore-ctx')?.value
                });
                return new Response(null, {
                    status: 200
                });
            } else if (req.nextUrl.pathname.endsWith('/confirm-upload')) {
                const res = await confirmUpload({
                    provider,
                    router: config.router,
                    body: await req.json(),
                    ctxToken: req.cookies.get('edgestore-ctx')?.value
                });
                return new Response(JSON.stringify(res), {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            } else if (req.nextUrl.pathname.endsWith('/delete-file')) {
                const res = await deleteFile({
                    provider,
                    router: config.router,
                    body: await req.json(),
                    ctxToken: req.cookies.get('edgestore-ctx')?.value
                });
                return new Response(JSON.stringify(res), {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            } else if (req.nextUrl.pathname.endsWith('/proxy-file')) {
                const url = req.nextUrl.searchParams.get('url');
                if (typeof url === 'string') {
                    const proxyRes = await fetch(url, {
                        headers: {
                            cookie: req.cookies.toString() ?? ''
                        }
                    });
                    const data = await proxyRes.arrayBuffer();
                    return new Response(data, {
                        status: proxyRes.status,
                        headers: {
                            'Content-Type': proxyRes.headers.get('Content-Type') ?? 'application/octet-stream'
                        }
                    });
                } else {
                    return new Response(null, {
                        status: 400
                    });
                }
            } else {
                return new Response(null, {
                    status: 404
                });
            }
        } catch (err) {
            if (err instanceof EdgeStoreError) {
                log[err.level](err.formattedMessage());
                if (err.cause) log[err.level](err.cause);
                return new Response(JSON.stringify(err.formattedJson()), {
                    status: EDGE_STORE_ERROR_CODES[err.code],
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            }
            log.error(err);
            return new Response(JSON.stringify(new EdgeStoreError({
                message: 'Internal server error',
                code: 'SERVER_ERROR'
            }).formattedJson()), {
                status: 500,
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        }
    };
}

export { createEdgeStoreNextHandler };
