import { EdgeStoreError, EDGE_STORE_ERROR_CODES } from '@edgestore/shared';
import { L as Logger } from '../../logger-09f43a75.mjs';
import { EdgeStoreProvider } from '../../providers/edgestore/index.mjs';
import { i as init, r as requestUpload, a as requestUploadParts, c as completeMultipartUpload, d as confirmUpload, e as deleteFile } from '../../shared-039276af.mjs';
import '../../index-28efdacf.mjs';
import '@panva/hkdf';
import 'cookie';
import 'jose';
import 'uuid';

function createEdgeStoreExpressHandler(config) {
    const { provider = EdgeStoreProvider() } = config;
    const log = new Logger(config.logLevel);
    globalThis._EDGE_STORE_LOGGER = log;
    log.debug('Creating Edge Store Express handler');
    return async (req, res)=>{
        try {
            if (req.url?.includes?.('/health')) {
                res.send('OK');
            } else if (req.url?.includes?.('/init')) {
                let ctx = {};
                try {
                    ctx = 'createContext' in config ? await config.createContext({
                        req,
                        res
                    }) : {};
                } catch (err) {
                    throw new EdgeStoreError({
                        message: 'Error creating context',
                        code: 'CREATE_CONTEXT_ERROR',
                        cause: err instanceof Error ? err : undefined
                    });
                }
                const { newCookies, token, baseUrl } = await init({
                    ctx,
                    provider,
                    router: config.router
                });
                res.setHeader('Set-Cookie', newCookies);
                res.json({
                    token,
                    baseUrl
                });
            } else if (req.url?.includes?.('/request-upload')) {
                res.json(await requestUpload({
                    provider,
                    router: config.router,
                    body: req.body,
                    ctxToken: req.cookies['edgestore-ctx']
                }));
            } else if (req.url?.includes?.('/request-upload-parts')) {
                res.json(await requestUploadParts({
                    provider,
                    router: config.router,
                    body: req.body,
                    ctxToken: req.cookies['edgestore-ctx']
                }));
            } else if (req.url?.includes?.('/complete-multipart-upload')) {
                await completeMultipartUpload({
                    provider,
                    router: config.router,
                    body: req.body,
                    ctxToken: req.cookies['edgestore-ctx']
                });
                res.status(200).end();
            } else if (req.url?.includes?.('/confirm-upload')) {
                res.json(await confirmUpload({
                    provider,
                    router: config.router,
                    body: req.body,
                    ctxToken: req.cookies['edgestore-ctx']
                }));
            } else if (req.url?.includes?.('/delete-file')) {
                res.json(await deleteFile({
                    provider,
                    router: config.router,
                    body: req.body,
                    ctxToken: req.cookies['edgestore-ctx']
                }));
            } else if (req.url?.includes?.('/proxy-file')) {
                const { url } = req.query;
                if (typeof url === 'string') {
                    const proxyRes = await fetch(url, {
                        headers: {
                            cookie: req.headers.cookie ?? ''
                        }
                    });
                    const data = await proxyRes.arrayBuffer();
                    res.setHeader('Content-Type', proxyRes.headers.get('Content-Type') ?? 'application/octet-stream');
                    res.end(Buffer.from(data));
                } else {
                    res.status(400).end();
                }
            } else {
                res.status(404).end();
            }
        } catch (err) {
            if (err instanceof EdgeStoreError) {
                log[err.level](err.formattedMessage());
                if (err.cause) log[err.level](err.cause);
                res.status(EDGE_STORE_ERROR_CODES[err.code]).json(err.formattedJson());
            } else {
                log.error(err);
                res.status(500).send(new EdgeStoreError({
                    message: 'Internal Server Error',
                    code: 'SERVER_ERROR'
                }).formattedJson());
            }
        }
    };
}

export { createEdgeStoreExpressHandler };
