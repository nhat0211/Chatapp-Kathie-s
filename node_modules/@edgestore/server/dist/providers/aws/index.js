'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var clientS3 = require('@aws-sdk/client-s3');
var s3RequestPresigner = require('@aws-sdk/s3-request-presigner');
var uuid = require('uuid');

function AWSProvider(options) {
    const { accessKeyId = process.env.ES_AWS_ACCESS_KEY_ID, secretAccessKey = process.env.ES_AWS_SECRET_ACCESS_KEY, region = process.env.ES_AWS_REGION, bucketName = process.env.ES_AWS_BUCKET_NAME } = options ?? {};
    const baseUrl = options?.baseUrl ?? process.env.EDGE_STORE_BASE_URL ?? `https://${bucketName}.s3.${region}.amazonaws.com`;
    const credentials = accessKeyId && secretAccessKey ? {
        accessKeyId,
        secretAccessKey
    } : undefined;
    const s3Client = new clientS3.S3Client({
        region,
        credentials
    });
    return {
        async init () {
            return {};
        },
        getBaseUrl () {
            return baseUrl;
        },
        async getFile ({ url }) {
            const path = url.replace(`${baseUrl}/`, '');
            const { ContentLength, LastModified } = await s3Client.send(new clientS3.HeadObjectCommand({
                Bucket: bucketName,
                Key: path
            }));
            if (!ContentLength || !LastModified) {
                throw new Error('File not found');
            }
            return {
                url,
                metadata: {},
                path: {},
                size: ContentLength,
                uploadedAt: LastModified
            };
        },
        async requestUpload ({ bucketName: esBucketName, fileInfo }) {
            const pathPrefix = `${esBucketName}${fileInfo.isPublic ? '/_public' : ''}`;
            const nameId = uuid.v4();
            const extension = fileInfo.extension ? `.${fileInfo.extension.replace('.', '')}` : '';
            const fileName = fileInfo.fileName ?? `${nameId}${extension}`;
            const filePath = fileInfo.path.reduce((acc, item)=>{
                return `${acc}/${item.value}`;
            }, '');
            const accessPath = `${pathPrefix}${filePath}/${fileName}`;
            const command = new clientS3.PutObjectCommand({
                Bucket: bucketName,
                Key: accessPath
            });
            const signedUrl = await s3RequestPresigner.getSignedUrl(s3Client, command, {
                expiresIn: 60 * 60
            });
            const url = `${baseUrl}/${accessPath}`;
            return {
                uploadUrl: signedUrl,
                accessUrl: url
            };
        },
        async requestUploadParts () {
            throw new Error('Not implemented');
        },
        async completeMultipartUpload () {
            throw new Error('Not implemented');
        },
        async confirmUpload () {
            throw new Error('Not implemented');
        },
        async deleteFile ({ url }) {
            const path = url.replace(`${baseUrl}/`, '');
            await s3Client.send(new clientS3.DeleteObjectCommand({
                Bucket: bucketName,
                Key: path
            }));
            return {
                success: true
            };
        }
    };
}

exports.AWSProvider = AWSProvider;
