{"version":3,"sources":["../src/components/CldImage/CldImage.tsx","../src/lib/cloudinary.ts","../src/helpers/getCldImageUrl.ts","../src/constants/analytics.ts","../package.json","../src/loaders/cloudinary-loader.ts","../src/components/CldOgImage/CldOgImage.tsx","../src/components/CldUploadButton/CldUploadButton.tsx","../src/components/CldUploadWidget/CldUploadWidget.tsx","../src/lib/util.ts","../src/components/CldVideoPlayer/CldVideoPlayer.tsx","../src/helpers/getCldVideoUrl.ts","../src/helpers/getCldOgImageUrl.ts"],"sourcesContent":["import React, { useState, useCallback, forwardRef, SyntheticEvent } from 'react';\nimport Image, { ImageProps } from 'next/image';\nimport { getTransformations } from '@cloudinary-util/util';\nimport { transformationPlugins } from '@cloudinary-util/url-loader';\nimport type { ImageOptions, ConfigOptions } from '@cloudinary-util/url-loader';\n\nimport { pollForProcessingImage } from '../../lib/cloudinary';\nimport { getCldImageUrl } from '../../helpers/getCldImageUrl';\n\nimport { cloudinaryLoader } from '../../loaders/cloudinary-loader';\n\nexport type CldImageProps = Omit<ImageProps, 'src'> & ImageOptions & {\n  config?: ConfigOptions;\n  preserveTransformations?: boolean;\n  src: string;\n  unoptimized?: boolean;\n};\n\nconst CldImage = forwardRef<HTMLImageElement, CldImageProps>(function CldImage(props, ref) {\n  let hasThrownError = false;\n\n  const CLD_OPTIONS = [\n    'deliveryType',\n    'preserveTransformations',\n    'strictTransformations',\n    'assetType',\n  ];\n\n  transformationPlugins.forEach(({ props = [] }) => {\n    props.forEach(prop => {\n      if ( CLD_OPTIONS.includes(prop) ) {\n        throw new Error(`Option ${prop} already exists!`);\n      }\n      CLD_OPTIONS.push(prop);\n    });\n  });\n\n  // Construct the base Image component props by filtering out Cloudinary-specific props\n\n  const imageProps: ImageProps = {\n    alt: props.alt,\n    src: props.src,\n  };\n\n  (Object.keys(props) as Array<keyof typeof props>)\n    .filter(key => !CLD_OPTIONS.includes(key))\n    // @ts-expect-error\n    .forEach(key => imageProps[key] = props[key]);\n\n  const defaultImgKey = (Object.keys(imageProps) as Array<keyof typeof imageProps>).map(key => `${key}:${imageProps[key]}`).join(';');\n  const [imgKey, setImgKey] = useState(defaultImgKey);\n\n  // Construct Cloudinary-specific props by looking for values for any of the supported prop keys\n\n  const cldOptions: Omit<ImageOptions, 'src'> = {};\n\n  CLD_OPTIONS.forEach(key => {\n    // @ts-expect-error\n    if ( props[key] ) {\n      // @ts-expect-error\n      cldOptions[key] = props[key] || undefined;\n    }\n  });\n\n  // Try to preserve the original transformations from the Cloudinary URL passed in\n  // to the component. This only works if the URL has a version number on it and otherwise\n  // will fail to load\n\n  if (props.preserveTransformations) {\n    try {\n      const transformations = getTransformations(props.src).map(t => t.join(','));\n      cldOptions.rawTransformations = [...transformations.flat(), ...(props.rawTransformations || [])];\n    } catch(e) {\n      console.warn(`Failed to preserve transformations: ${(e as Error).message}`)\n    }\n  }\n\n  // The unoptimized flag is intended to remove all optimizations including quality, format, and sizing\n  // via responsive sizing. When passing this in, it also prevents the `loader` from running, thus\n  // breaking this component. This rewrites the `src` to construct a fully formed Cloudinary URL\n  // that also disables format and quality transformations, to deliver it as unoptimized\n  // See about unoptimized not working with loader: https://github.com/vercel/next.js/issues/50764\n\n  const IMAGE_OPTIONS: { unoptimized?: boolean } = (process.env.__NEXT_IMAGE_OPTS || {}) as unknown as object;\n\n  if ( props.unoptimized === true || IMAGE_OPTIONS?.unoptimized === true ) {\n    imageProps.src = getCldImageUrl({\n      ...cldOptions,\n      width: imageProps.width,\n      height: imageProps.height,\n      src: imageProps.src as string,\n      format: 'default',\n      quality: 'default',\n    }, props.config);\n  }\n\n  /**\n   * handleOnError\n   */\n\n  async function onError(options: SyntheticEvent<HTMLImageElement, Event>) {\n    let pollForImage = true;\n\n    // The onError function should never fire more than once. The use case for tracking it\n    // at all outside of the standard Next Image flow is for scenarios like when Cloudinary\n    // is processing an image where we want to try to update the UI upon completion.\n    // If this fires a second time, it is likely because of another issue, which will end\n    // up triggering an infinite loop if the resulting image keeps erroring and\n    // this function sets a key using the current time to force refresh the UI\n\n    if ( hasThrownError ) return;\n\n    hasThrownError = true;\n\n    if ( typeof props.onError === 'function' ) {\n      const onErrorResult = props.onError(options);\n\n      if ( typeof onErrorResult === 'boolean' && onErrorResult === false ) {\n        pollForImage = false;\n      }\n    } else if ( typeof props.onError === 'boolean' && props.onError === false ) {\n      pollForImage = false;\n    }\n\n    // Give an escape hatch in case the user wants to handle the error themselves\n    // or if they want to disable polling for the image\n\n    if ( pollForImage === false ) return;\n\n    const image = options.target as HTMLImageElement\n    const result = await pollForProcessingImage({ src: image.src })\n\n    if ( result ) {\n      setImgKey(`${defaultImgKey};${Date.now()}`);\n    }\n  }\n\n  const handleOnError = useCallback(onError, [pollForProcessingImage, defaultImgKey]);\n\n  // Copypasta from https://github.com/prismicio/prismic-next/pull/79/files\n  // Thanks Angelo!\n  // TODO: Remove once https://github.com/vercel/next.js/issues/52216 is resolved.\n\n  let ResolvedImage = Image;\n\n  if (\"default\" in ResolvedImage) {\n    ResolvedImage = (ResolvedImage as unknown as { default: typeof Image }).default;\n  }\n\n  return (\n    <ResolvedImage\n      key={imgKey}\n      {...imageProps}\n      loader={(loaderOptions) => cloudinaryLoader({ loaderOptions, imageProps, cldOptions, cldConfig: props.config })}\n      onError={handleOnError}\n      ref={ref}\n    />\n  );\n});\n\nexport default CldImage;\n","/**\n * pollForProcessingImage\n */\n\nexport interface PollForProcessingImageOptions {\n  src: string;\n}\n\nexport async function pollForProcessingImage(options: PollForProcessingImageOptions): Promise<boolean> {\n  const { src } = options;\n  try {\n    await new Promise((resolve, reject) => {\n      fetch(src).then(res => {\n        if ( !res.ok ) {\n          reject(res);\n          return;\n        }\n        resolve(res);\n      });\n    });\n  } catch(e: any) {\n    if ( e.status === 423 ) {\n      return await pollForProcessingImage(options);\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function checkForCloudName(cloudName: string | undefined) {\n  if (!cloudName) {\n    throw new Error('A Cloudinary Cloud name is required, please make sure NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME is set and configured in your environment.');\n  }\n}","import { constructCloudinaryUrl } from '@cloudinary-util/url-loader';\nimport type { ImageOptions, ConfigOptions, AnalyticsOptions } from '@cloudinary-util/url-loader';\n\nimport { NEXT_CLOUDINARY_ANALYTICS_ID, NEXT_CLOUDINARY_VERSION, NEXT_VERSION } from '../constants/analytics';\nimport {checkForCloudName} from \"../lib/cloudinary\";\n\n/**\n * getCldImageUrl\n */\n\nexport interface GetCldImageUrlOptions extends ImageOptions {};\nexport interface GetCldImageUrlConfig extends ConfigOptions {};\nexport interface GetCldImageUrlAnalytics extends AnalyticsOptions {};\n\n// @deprecated GetCldImageUrl\nexport interface GetCldImageUrl {\n  options: GetCldImageUrlOptions;\n  config?: GetCldImageUrlConfig;\n  analytics?: GetCldImageUrlAnalytics;\n}\n\nexport function getCldImageUrl(options: GetCldImageUrlOptions, config?: GetCldImageUrlConfig, analytics?: GetCldImageUrlAnalytics) {\n  const cloudName = config?.cloud?.cloudName ?? process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME;\n  checkForCloudName(cloudName);\n  return constructCloudinaryUrl({\n    options,\n    config: Object.assign({\n      cloud: {\n        cloudName: cloudName\n      },\n    }, config),\n    analytics: Object.assign({\n      sdkCode: NEXT_CLOUDINARY_ANALYTICS_ID,\n      sdkSemver: NEXT_CLOUDINARY_VERSION,\n      techVersion: NEXT_VERSION,\n      feature: ''\n    }, analytics)\n  });\n}\n","import nextPkg from 'next/package.json';\nimport pkg from '../../package.json';\n\nexport const NEXT_CLOUDINARY_ANALYTICS_ID = 'V';\nexport const NEXT_CLOUDINARY_VERSION = pkg.version;\nexport const NEXT_VERSION = nextPkg.version;","{\n  \"name\": \"next-cloudinary\",\n  \"version\": \"5.18.0\",\n  \"license\": \"MIT\",\n  \"main\": \"./dist/index.js\",\n  \"module\": \"./dist/index.mjs\",\n  \"types\": \"./dist/index.d.ts\",\n  \"source\": \"src/index.ts\",\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"dev\": \"tsup --watch\",\n    \"prepublishOnly\": \"cp ../README.md . && cp ../LICENSE . && yarn build\",\n    \"postpublish\": \"rm ./README.md && rm ./LICENSE\",\n    \"test\": \"jest\",\n    \"test:app\": \"NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=\\\"test\\\" yarn build && cd tests/nextjs-app && yarn build\"\n  },\n  \"dependencies\": {\n    \"@cloudinary-util/url-loader\": \"^3.22.0\",\n    \"@cloudinary-util/util\": \"^2.3.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.23.2\",\n    \"@babel/preset-env\": \"^7.23.2\",\n    \"@types/jest\": \"^29.5.6\",\n    \"@types/react\": \"^18.2.33\",\n    \"@types/react-dom\": \"^18.2.14\",\n    \"babel-jest\": \"^29.7.0\",\n    \"dotenv\": \"^16.3.1\",\n    \"jest\": \"^29.7.0\",\n    \"jest-environment-jsdom\": \"^29.7.0\",\n    \"mkdirp\": \"^3.0.1\",\n    \"ts-jest\": \"^29.1.1\",\n    \"tsup\": \"^7.2.0\",\n    \"typescript\": \"^5.2.2\"\n  },\n  \"peerDependencies\": {\n    \"next\": \"^12 || ^13 || ^14\",\n    \"react\": \"^17 || ^18\"\n  }\n}\n","import { ImageProps } from 'next/image';\n\nimport { getCldImageUrl } from '../helpers/getCldImageUrl';\n\nexport interface CloudinaryLoaderCldOptions {\n  widthResize?: string | number;\n}\n\nexport interface CloudinaryLoaderLoaderOptions {\n  height?: string | number;\n  width?: string | number;\n}\n\nexport interface CloudinaryLoader {\n  loaderOptions: CloudinaryLoaderLoaderOptions;\n  imageProps: ImageProps;\n  cldOptions: CloudinaryLoaderCldOptions;\n  cldConfig?: object;\n}\n\nexport function cloudinaryLoader({ loaderOptions, imageProps, cldOptions, cldConfig = {} }: CloudinaryLoader) {\n  const options = {\n    ...imageProps,\n    ...cldOptions\n  }\n\n  options.width = typeof options.width === 'string' ? parseInt(options.width) : options.width;\n  options.height = typeof options.height === 'string' ? parseInt(options.height) : options.height;\n\n  // The loader options are used to create dynamic sizing when working with responsive images\n  // so these should override the default options collected from the props alone if\n  // the results are different. While we don't always use the height in the loader logic,\n  // we always pass it here, as the usage is determined later based on cropping.js\n\n  let widthResize;\n\n  if ( typeof loaderOptions?.width === 'number' && typeof options.width === 'number' && loaderOptions.width !== options.width ) {\n    widthResize = loaderOptions.width;\n  } else if ( typeof loaderOptions?.width === 'number' && typeof options?.width !== 'number' ) {\n    // If we don't have a width on the options object, this may mean that the component is using\n    // the fill option: https://nextjs.org/docs/pages/api-reference/components/image#fill\n    // The Fill option does not allow someone to pass in a width or a height\n    // If this is the case, we still need to define a width for sizing optimization but also\n    // for responsive sizing to take effect, so we can utilize the loader width for the base width\n\n    widthResize = loaderOptions.width;\n    options.width = widthResize;\n  }\n\n  // If we have a resize width that's smaller than the user-defined width, we want to give the\n  // ability to perform a final resize on the image without impacting any of the effects like text\n  // overlays that may depend on the size to work properly\n\n  if ( options.width && widthResize && widthResize < options.width ) {\n    options.widthResize = loaderOptions.width;\n  }\n\n  // @ts-ignore\n  return getCldImageUrl(options, cldConfig);\n}","import React from 'react';\nimport Head from 'next/head';\nimport type { ImageOptions } from '@cloudinary-util/url-loader';\n\nimport { CldImageProps } from '../CldImage/CldImage';\nimport { getCldImageUrl } from '../../helpers/getCldImageUrl';\nimport { OG_IMAGE_WIDTH, OG_IMAGE_WIDTH_RESIZE, OG_IMAGE_HEIGHT } from '../../constants/sizes';\n\nconst TWITTER_CARD = 'summary_large_image';\n\nexport type CldOgImageProps = CldImageProps & {\n  excludeTags?: Array<string>;\n  keys?: object;\n  twitterTitle?: string;\n}\n\nconst CldOgImage = ({ excludeTags = [], twitterTitle, keys = {}, ...props }: CldOgImageProps) => {\n  const { alt } = props;\n\n  const options: ImageOptions = {\n    ...props,\n    crop: props.crop || 'fill',\n    gravity: props.gravity || 'center',\n    height: props.height || OG_IMAGE_HEIGHT,\n    src: props.src,\n    width: props.width || OG_IMAGE_WIDTH,\n    widthResize: props.width || OG_IMAGE_WIDTH_RESIZE\n  }\n\n  let width = typeof options.width === 'string' ? parseInt(options.width) : options.width;\n  let height = typeof options.height === 'string' ? parseInt(options.height) : options.height;\n\n  // Resize the height based on the widthResize property\n\n  if ( typeof height === 'number' && typeof width === 'number' ) {\n    height = ( OG_IMAGE_WIDTH_RESIZE / width ) * height;\n  }\n\n  width = OG_IMAGE_WIDTH_RESIZE;\n\n  // Render the final URLs. We use two different format versions to deliver\n  // webp for Twitter as it supports it (and we can control with tags) where\n  // other platforms may not support webp, so we deliver jpg\n\n  const ogImageUrl = getCldImageUrl({\n    ...options,\n    format: props.format || 'jpg',\n  });\n\n  const twitterImageUrl = getCldImageUrl({\n    ...options,\n    format: props.format || 'webp',\n  });\n\n  const metaKeys = {\n    'og:image': 'og-image',\n    'og:image:secure_url': 'og-image-secureurl',\n    'og:image:width': 'og-image-width',\n    'og:image:height': 'og-image-height',\n    'og:image:alt': 'og-image-alt',\n    'twitter:title': 'twitter-title',\n    'twitter:card': 'twitter-card',\n    'twitter:image': 'twitter-image',\n    ...keys\n  }\n\n  // We need to include the tags within the Next.js Head component rather than\n  // direcly adding them inside of the Head otherwise we get unexpected results\n\n    return (\n    <Head>\n      <meta key={metaKeys['og:image']} property=\"og:image\" content={ogImageUrl} />\n      <meta key={metaKeys['og:image:secure_url']} property=\"og:image:secure_url\" content={ogImageUrl} />\n      <meta key={metaKeys['og:image:width']} property=\"og:image:width\" content={`${width}`} />\n      <meta key={metaKeys['og:image:height']} property=\"og:image:height\" content={`${height}`} />\n\n      {alt && (\n        <meta key={metaKeys['og:image:alt']} property=\"og:image:alt\" content={alt} />\n      )}\n\n      {/* Required for summary_large_image, exclude vai excludeTags */}\n      {/* https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/summary-card-with-large-image */}\n\n      {!excludeTags.includes('twitter:title') && (\n        <meta key={metaKeys['twitter:title']} property=\"twitter:title\" content={twitterTitle || ' '} />\n      )}\n\n      <meta key={metaKeys['twitter:card']} property=\"twitter:card\" content={TWITTER_CARD} />\n      <meta key={metaKeys['twitter:image']} property=\"twitter:image\" content={twitterImageUrl} />\n    </Head>\n  );\n}\n\nexport default CldOgImage;\n","import React from 'react';\nimport CldUploadWidget, { CldUploadWidgetProps } from '../CldUploadWidget';\n\nexport interface CldUploadButtonProps extends Omit<CldUploadWidgetProps, 'children'> {\n  className?: string;\n  children?: JSX.Element | string | Array<JSX.Element|string>;\n  onClick?: Function;\n}\n\nconst CldUploadButton = ({\n  className,\n  children,\n  onClick,\n  onError,\n  onOpen,\n  onUpload,\n  onAbort,\n  onBatchCancelled,\n  onClose,\n  onDisplayChanged,\n  onPublicId,\n  onQueuesEnd,\n  onQueuesStart,\n  onRetry,\n  onShowCompleted,\n  onSourceChanged,\n  onSuccess,\n  onTags,\n  onUploadAdded,\n  options,\n  signatureEndpoint,\n  uploadPreset,\n  ...props\n}: CldUploadButtonProps) => {\n\n  return (\n    <>\n      <CldUploadWidget\n        onError={onError}\n        onOpen={onOpen}\n        onUpload={onUpload}\n        onAbort={onAbort}\n        onBatchCancelled={onBatchCancelled}\n        onClose={onClose}\n        onDisplayChanged={onDisplayChanged}\n        onPublicId={onPublicId}\n        onQueuesEnd={onQueuesEnd}\n        onQueuesStart={onQueuesStart}\n        onRetry={onRetry}\n        onShowCompleted={onShowCompleted}\n        onSourceChanged={onSourceChanged}\n        onSuccess={onSuccess}\n        onTags={onTags}\n        onUploadAdded={onUploadAdded}\n        options={options}\n        signatureEndpoint={signatureEndpoint}\n        uploadPreset={uploadPreset}\n      >\n        {({ open, isLoading }) => {\n          function handleOnClick(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n            e.preventDefault();\n\n            open();\n\n            if ( typeof onClick === 'function' ) {\n              onClick(e);\n            }\n          }\n          return (\n            <button {...props} className={className || ''} onClick={handleOnClick} disabled={isLoading} >\n              {children || 'Upload'}\n            </button>\n          );\n        }}\n      </CldUploadWidget>\n    </>\n  );\n};\n\nexport default CldUploadButton;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Script from 'next/script';\n\nimport { triggerOnIdle } from '../../lib/util';\n\nimport {\n  CldUploadEventCallback,\n  CldUploadWidgetCloseInstanceMethodOptions,\n  CldUploadWidgetCloudinaryInstance,\n  CldUploadWidgetDestroyInstanceMethodOptions,\n  CldUploadWidgetError,\n  CldUploadWidgetInstanceMethods,\n  CldUploadWidgetOpenInstanceMethodOptions,\n  CldUploadWidgetOpenWidgetSources,\n  CldUploadWidgetProps,\n  CldUploadWidgetResults,\n  CldUploadWidgetWidgetInstance,\n} from './CldUploadWidget.types';\nimport {checkForCloudName} from \"../../lib/cloudinary\";\n\nconst WIDGET_WATCHED_EVENTS = [\n  'success',\n  'display-changed'\n];\n\nconst WIDGET_EVENTS: { [key: string]: string } = {\n  'abort': 'onAbort',\n  'batch-cancelled': 'onBatchCancelled',\n  // 'close': 'onClose', // TODO: should follow other event patterns\n  'display-changed': 'onDisplayChanged',\n  'publicid': 'onPublicId',\n  'queues-end': 'onQueuesEnd',\n  'queues-start': 'onQueuesStart',\n  'retry': 'onRetry',\n  'show-completed': 'onShowCompleted',\n  'source-changed': 'onSourceChanged',\n  'success': 'onSuccess',\n  'tags': 'onTags',\n  'upload-added': 'onUploadAdded',\n}\n\n// TODO: update onError to follow CldUploadEventCallback pattern\n// TODO: update onClose to follow CldUploadEventCallback pattern\n\nconst CldUploadWidget = ({\n  children,\n  onClose,\n  onError,\n  onOpen,\n  onUpload,\n  options,\n  signatureEndpoint,\n  uploadPreset,\n  ...props\n}: CldUploadWidgetProps) => {\n  const cloudinary: CldUploadWidgetCloudinaryInstance = useRef();\n  const widget: CldUploadWidgetWidgetInstance = useRef();\n\n  const signed = !!signatureEndpoint;\n\n  const [error, setError] = useState<CldUploadWidgetError | undefined>(undefined);\n  const [results, setResults] = useState<CldUploadWidgetResults | undefined>(undefined);\n  const [isScriptLoading, setIsScriptLoading] = useState(true);\n\n  // When creating a signed upload, you need to provide both your Cloudinary API Key\n  // as well as a signature generator function that will sign any paramters\n  // either on page load or during the upload process. Read more about signed uploads at:\n  // https://cloudinary.com/documentation/upload_widget#signed_uploads\n\n  const uploadOptions = {\n    cloudName: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,\n    uploadPreset: uploadPreset || process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET,\n    apiKey: process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY,\n    ...options,\n  };\n\n  //Check if Cloud Name exists\n  checkForCloudName(process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME);\n\n  if ( signed ) {\n    uploadOptions.uploadSignature = generateSignature;\n\n    if (!uploadOptions.apiKey) {\n      console.warn(`Missing dependency: Signed Upload requires an API key`);\n    }\n  }\n\n  // Handle result states and callbacks\n\n  useEffect(() => {\n    if ( typeof results === 'undefined' ) return;\n\n    const isSuccess = results.event === 'success';\n    const isClosed = results.event === 'display-changed' && results.info === 'hidden';\n\n    if ( isSuccess && typeof onUpload === 'function' ) {\n      onUpload(results, widget.current);\n    }\n\n    if ( isClosed && typeof onClose === 'function' ) {\n      onClose(widget.current);\n    }\n  }, [results])\n\n  useEffect(() => {\n    if ( error && typeof onError === 'function' ) {\n      onError(error, widget.current);\n    }\n  }, [error]);\n\n  /**\n   * handleOnLoad\n   * @description Stores the Cloudinary window instance to a ref when the widget script loads\n   */\n\n  function handleOnLoad() {\n    setIsScriptLoading(false);\n    if ( !cloudinary.current ) {\n      cloudinary.current = (window as any).cloudinary;\n    }\n\n    // To help improve load time of the widget on first instance, use requestIdleCallback\n    // to trigger widget creation. Optional.\n\n    triggerOnIdle(() => {\n      if ( !widget.current ) {\n        widget.current = createWidget();\n      }\n    });\n  }\n\n  useEffect(() => {\n    return () => {\n      widget.current?.destroy();\n      widget.current = undefined;\n    }\n  }, [])\n\n  /**\n   * generateSignature\n   * @description Makes a request to an endpoint to sign Cloudinary parameters as part of widget creation\n   */\n\n  function generateSignature(callback: Function, paramsToSign: object) {\n    if ( typeof signatureEndpoint === 'undefined' ) {\n      throw Error('Failed to generate signature: signatureEndpoint undefined.')\n    }\n    fetch(signatureEndpoint, {\n      method: 'POST',\n      body: JSON.stringify({\n        paramsToSign,\n      }),\n    })\n      .then((r) => r.json())\n      .then(({ signature }) => {\n        callback(signature);\n      });\n  }\n\n  /**\n   * Instance Methods\n   * Gives the ability to interface directly with the Upload Widget instance methods like open and close\n   * https://cloudinary.com/documentation/upload_widget_reference#instance_methods\n   */\n\n  function invokeInstanceMethod<\n    TMethod extends keyof CldUploadWidgetInstanceMethods\n  >(\n    method: TMethod,\n    options: Parameters<\n      CldUploadWidgetInstanceMethods[TMethod]\n    > = [] as Parameters<CldUploadWidgetInstanceMethods[TMethod]>\n  ) {\n    if (!widget.current) {\n      widget.current = createWidget();\n    }\n\n    if (typeof widget?.current[method] === \"function\") {\n      return widget.current[method](...options);\n    }\n  }\n\n  function close(options?: CldUploadWidgetCloseInstanceMethodOptions) {\n    invokeInstanceMethod('close', [options]);\n  }\n\n  function destroy(options?: CldUploadWidgetDestroyInstanceMethodOptions) {\n    return invokeInstanceMethod('destroy', [options]);\n  }\n\n  function hide() {\n    invokeInstanceMethod('hide');\n  }\n\n  function isDestroyed() {\n    return invokeInstanceMethod('isDestroyed');\n  }\n\n  function isMinimized() {\n    return invokeInstanceMethod('isMinimized');\n  }\n\n  function isShowing() {\n    return invokeInstanceMethod('isShowing');\n  }\n\n  function minimize() {\n    invokeInstanceMethod('minimize');\n  }\n\n  function open(widgetSource?: CldUploadWidgetOpenWidgetSources, options?: CldUploadWidgetOpenInstanceMethodOptions) {\n    invokeInstanceMethod('open', [widgetSource, options]);\n\n    if ( typeof onOpen === 'function' ) {\n      onOpen(widget.current);\n    }\n  }\n\n  function show() {\n    invokeInstanceMethod('show');\n  }\n\n  function update() {\n    invokeInstanceMethod('update');\n  }\n\n  const instanceMethods: CldUploadWidgetInstanceMethods = {\n    close,\n    destroy,\n    hide,\n    isDestroyed,\n    isMinimized,\n    isShowing,\n    minimize,\n    open,\n    show,\n    update,\n  }\n\n  /**\n   * createWidget\n   * @description Creates a new instance of the Cloudinary widget and stores in a ref\n   */\n\n  function createWidget() {\n    return cloudinary.current?.createUploadWidget(uploadOptions, (uploadError: CldUploadWidgetError, uploadResult: CldUploadWidgetResults) => {\n      if ( uploadError && uploadError !== null ) {\n        setError(uploadError);\n      }\n\n      if ( typeof uploadResult?.event === 'string' ) {\n        if ( WIDGET_WATCHED_EVENTS.includes(uploadResult?.event) ) {\n          setResults(uploadResult);\n        }\n\n        const widgetEvent = WIDGET_EVENTS[uploadResult.event] as keyof typeof props;\n\n        if ( typeof widgetEvent === 'string' && typeof props[widgetEvent] === 'function' && typeof props[widgetEvent] ) {\n          const callback = props[widgetEvent] as CldUploadEventCallback;\n          callback(uploadResult, {\n            widget: widget.current,\n            ...instanceMethods\n          });\n        }\n      }\n    });\n  }\n\n  return (\n    <>\n      {typeof children === 'function' && children({\n        cloudinary: cloudinary.current,\n        widget: widget.current,\n        results,\n        error,\n        isLoading: isScriptLoading,\n        ...instanceMethods,\n        })}\n      <Script\n        id={`cloudinary-uploadwidget-${Math.floor(Math.random() * 100)}`}\n        src=\"https://upload-widget.cloudinary.com/global/all.js\"\n        onLoad={handleOnLoad}\n        onError={(e) => console.error(`Failed to load Cloudinary Upload Widget: ${e.message}`)}\n      />\n    </>\n  );\n};\n\nexport default CldUploadWidget;\n","/**\n * triggerOnIdle\n * @see MDN Polyfill https://github.com/behnammodi/polyfill/blob/master/window.polyfill.js#L7-L24\n */\n\nexport function triggerOnIdle(callback: any) {\n  if ( window && 'requestIdleCallback' in window ) {\n    return requestIdleCallback(callback);\n  }\n  return setTimeout(() => callback(), 1);\n}","import React, {useRef, MutableRefObject, useEffect} from 'react';\nimport Script from 'next/script';\nimport Head from 'next/head';\nimport { parseUrl } from '@cloudinary-util/util';\n\nimport { CldVideoPlayerProps } from './CldVideoPlayer.types';\nimport { CloudinaryVideoPlayer, CloudinaryVideoPlayerOptions, CloudinaryVideoPlayerOptionsLogo } from '../../types/player';\nimport { getCldImageUrl } from '../../helpers/getCldImageUrl';\nimport { getCldVideoUrl } from '../../helpers/getCldVideoUrl';\nimport {checkForCloudName} from \"../../lib/cloudinary\";\n\nlet playerInstances: string[] = [];\n\nconst PLAYER_VERSION = '1.10.4';\n\nconst CldVideoPlayer = (props: CldVideoPlayerProps) => {\n\n  const {\n    autoPlay, // Left behind for backward compactibility.\n    autoplay,\n    className,\n    colors,\n    controls = true,\n    fontFace,\n    height,\n    id,\n    language,\n    languages,\n    logo = true,\n    loop = false,\n    muted = false,\n    onDataLoad,\n    onError,\n    onMetadataLoad,\n    onPause,\n    onPlay,\n    onEnded,\n    poster,\n    src,\n    sourceTypes,\n    transformation,\n    quality = 'auto',\n    width,\n    ...otherCldVidPlayerOptions\n  } = props as CldVideoPlayerProps;\n\n  const playerTransformations = Array.isArray(transformation) ? transformation : [transformation];\n  let publicId: string = src || \"\";\n\n\n  // If the publicId/src is a URL, attempt to parse it as a Cloudinary URL\n  // to get the public ID alone\n\n  if ( publicId.startsWith('http') ) {\n    try {\n      const parts = parseUrl(src);\n      if ( typeof parts?.publicId === 'string' ) {\n        publicId = parts?.publicId;\n      }\n    } catch(e) {}\n  }\n\n  // Set default transformations for the player\n\n  playerTransformations.unshift({\n    quality\n  });\n\n  // Setup the refs and allow for the caller to pass through their\n  // own ref instance\n\n  const cloudinaryRef = useRef<any>();\n  const defaultVideoRef = useRef() as MutableRefObject<HTMLVideoElement | null>;\n  const videoRef = props.videoRef || defaultVideoRef;\n  const defaultPlayerRef = useRef()as MutableRefObject<CloudinaryVideoPlayer | null>;\n  const playerRef = props.playerRef || defaultPlayerRef;\n\n  const playerId = id || `player-${publicId.replace('/', '-')}`;\n  let playerClassName = 'cld-video-player cld-fluid';\n\n  if ( className ) {\n    playerClassName = `${playerClassName} ${className}`;\n  }\n\n  // Check if the same id is being used for multiple video instances.\n  const checkForMultipleInstance = playerInstances.filter((id) => id === playerId).length > 1\n  if (checkForMultipleInstance) {\n    console.warn(`Multiple instances of the same video detected on the\n     page which may cause some features to not work. \n    Try adding a unique id to each player.`)\n  } else {\n    playerInstances.push(playerId)\n  }\n\n  const events: Record<string, Function|undefined> = {\n    error: onError,\n    loadeddata: onDataLoad,\n    loadedmetadata: onMetadataLoad,\n    pause: onPause,\n    play: onPlay,\n    ended: onEnded\n  };\n\n  /**\n   * handleEvent\n   * @description Event handler for all player events\n   */\n\n  function handleEvent(event: { type: 'string' }) {\n    const activeEvent = events[event.type];\n\n    if ( typeof activeEvent === 'function' ) {\n      activeEvent(getPlayerRefs());\n    }\n  }\n\n  //Check if Cloud Name exists\n  checkForCloudName(process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME);\n\n  /**\n   * handleOnLoad\n   * @description Stores the Cloudinary window instance to a ref when the widget script loads\n   */\n\n  function handleOnLoad() {\n    if ( 'cloudinary' in window ) {\n      cloudinaryRef.current = window.cloudinary;\n      let logoOptions: CloudinaryVideoPlayerOptionsLogo = {};\n\n      if ( typeof logo === 'boolean' ) {\n        logoOptions.showLogo = logo;\n      } else if ( typeof logo === 'object' ) {\n        logoOptions = {\n          ...logoOptions,\n          showLogo: true,\n          logoImageUrl: logo.imageUrl,\n          logoOnclickUrl: logo.onClickUrl\n        }\n      }\n\n      /* \n      Parse the value passed to 'autoplay' or 'autoPlay';\n      if its a boolean or a boolean passed as string (\"true\") set it directly to browser standard prop autoplay else fallback to default; \n      if its a string and not a boolean passed as string (\"true\") set it to cloudinary video player autoplayMode prop else fallback to undefined;\n      */\n      const autoplayFallback = autoplay || autoPlay ;\n      let autoPlayValue: boolean | 'true' | 'false' = false;\n      let autoplayModeValue: string | undefined = undefined;\n\n      if ( autoPlay && process.env.NODE_ENV === 'development' ) {\n        console.warn('Prop autoPlay will be removed in future versions, please use autoplay (lowercase \"p\")')\n      }\n\n      if (typeof autoplayFallback === 'boolean' || autoplayFallback === 'true' || autoplayFallback === 'false') {\n        autoPlayValue = autoplayFallback\n      }\n\n      if (typeof autoplayFallback === 'string' && autoplayFallback !== 'true' && autoplayFallback !== 'false') {\n        autoplayModeValue = autoplayFallback;\n      }\n\n\n      let playerOptions: CloudinaryVideoPlayerOptions = {\n        autoplayMode: autoplayModeValue,\n        autoplay: autoPlayValue,\n        cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,\n        controls,\n        fontFace: fontFace || '',\n        language,\n        languages,\n        loop,\n        muted,\n        publicId,\n        transformation: playerTransformations,\n        ...logoOptions,\n        ...otherCldVidPlayerOptions\n      };\n\n      if ( Array.isArray(sourceTypes) ) {\n        playerOptions.sourceTypes = sourceTypes;\n      }\n\n      if ( typeof colors === 'object' ) {\n        playerOptions.colors = colors;\n      }\n\n      if ( typeof poster === 'string' ) {\n        // If poster is a string, assume it's either a public ID\n        // or a remote URL, in either case pass to `publicId`\n        playerOptions.posterOptions = {\n          publicId: poster\n        };\n      } else if ( typeof poster === 'object' ) {\n        // If poster is an object, we can either customize the\n        // automatically generated image from the video or generate\n        // a completely new image from a separate public ID, so look\n        // to see if the src is explicitly set to determine whether \n        // or not to use the video's ID or just pass things along\n        if ( typeof poster.src !== 'string' ) {\n          playerOptions.posterOptions = {\n            publicId: getCldVideoUrl({\n              ...poster,\n              src: publicId,\n              format: 'auto:image',\n            })\n          };\n        } else {\n          playerOptions.posterOptions = {\n            publicId: getCldImageUrl(poster)\n          };\n        }\n      }\n\n      playerRef.current = cloudinaryRef.current.videoPlayer(videoRef.current, playerOptions);\n\n      Object.keys(events).forEach((key) => {\n        if ( typeof events[key] === 'function' ) {\n          playerRef.current?.on(key, handleEvent);\n        }\n      });\n    }\n  }\n\n  useEffect(() => {\n\n    return () => {\n      //@ts-ignore\n      playerRef.current?.videojs.cloudinary.dispose();\n      playerInstances = playerInstances.filter((id) => id !== playerId)\n    }\n  }, []);\n\n  /**\n   *getPlayerRefs\n   */\n\n  function getPlayerRefs() {\n    return {\n      player: playerRef.current,\n      video: videoRef.current\n    }\n  }\n\n  return (\n    <>\n      <Head>\n        <link href={`https://unpkg.com/cloudinary-video-player@${PLAYER_VERSION}/dist/cld-video-player.min.css`} rel=\"stylesheet\" />\n      </Head>\n      <div style={{ width: '100%', aspectRatio: `${props.width} / ${props.height}`}}>\n        <video\n          ref={videoRef}\n          id={playerId}\n          className={playerClassName}\n          width={width}\n          height={height}\n        />\n        <Script\n            id={`cloudinary-videoplayer-${playerId}-${Math.floor(Math.random() * 100)}`}\n            src={`https://unpkg.com/cloudinary-video-player@${PLAYER_VERSION}/dist/cld-video-player.min.js`}\n            onLoad={handleOnLoad}\n            onError={(e) => console.error(`Failed to load Cloudinary Video Player: ${e.message}`)}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default CldVideoPlayer;","import { constructCloudinaryUrl } from '@cloudinary-util/url-loader';\nimport type { VideoOptions, ConfigOptions, AnalyticsOptions } from '@cloudinary-util/url-loader';\n\nimport { NEXT_CLOUDINARY_ANALYTICS_ID, NEXT_CLOUDINARY_VERSION, NEXT_VERSION } from '../constants/analytics';\nimport {checkForCloudName} from \"../lib/cloudinary\";\n\n/**\n * getCldVideoUrl\n */\n\nexport interface GetCldVideoUrlOptions extends VideoOptions {};\nexport interface GetCldVideoUrlConfig extends ConfigOptions {};\nexport interface GetCldVideoUrlAnalytics extends AnalyticsOptions {};\n\nexport function getCldVideoUrl(options: GetCldVideoUrlOptions, config?: GetCldVideoUrlConfig, analytics?: GetCldVideoUrlAnalytics) {\n  const cloudName = config?.cloud?.cloudName ?? process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME;\n  checkForCloudName(cloudName);\n  return constructCloudinaryUrl({\n    options: {\n      assetType: 'video',\n      ...options\n    },\n    config: Object.assign({\n      cloud: {\n        cloudName: cloudName\n      },\n    }, config),\n    analytics: Object.assign({\n      sdkCode: NEXT_CLOUDINARY_ANALYTICS_ID,\n      sdkSemver: NEXT_CLOUDINARY_VERSION,\n      techVersion: NEXT_VERSION,\n      feature: ''\n    }, analytics)\n  });\n}\n","import { OG_IMAGE_WIDTH, OG_IMAGE_WIDTH_RESIZE, OG_IMAGE_HEIGHT } from '../constants/sizes';\n\nimport { getCldImageUrl } from './getCldImageUrl';\nimport type { GetCldImageUrl, GetCldImageUrlOptions } from './getCldImageUrl';\n\n/**\n * getCldImageUrl\n */\n\n// @deprecated GetCldOgImageUrl\nexport interface GetCldOgImageUrl extends GetCldImageUrl {}\n\nexport interface GetCldOgImageUrlOptions extends GetCldImageUrlOptions {};\n\nexport function getCldOgImageUrl(options: GetCldOgImageUrlOptions) {\n  return getCldImageUrl({\n    ...options,\n    crop: options.crop || 'fill',\n    format: options.format || 'jpg',\n    gravity: options.gravity || 'center',\n    height: options.height || OG_IMAGE_HEIGHT,\n    width: options.width || OG_IMAGE_WIDTH,\n    widthResize: options.width || OG_IMAGE_WIDTH_RESIZE\n  });\n}"],"mappings":"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","names":["React","useState","useCallback","forwardRef","Image","getTransformations","transformationPlugins","pollForProcessingImage","options","src","resolve","reject","res","e","checkForCloudName","cloudName","constructCloudinaryUrl","nextPkg","package_default","NEXT_CLOUDINARY_ANALYTICS_ID","NEXT_CLOUDINARY_VERSION","package_default","NEXT_VERSION","nextPkg","getCldImageUrl","options","config","analytics","_a","_b","cloudName","checkForCloudName","constructCloudinaryUrl","NEXT_CLOUDINARY_ANALYTICS_ID","NEXT_CLOUDINARY_VERSION","NEXT_VERSION","cloudinaryLoader","loaderOptions","imageProps","cldOptions","cldConfig","options","widthResize","getCldImageUrl","CldImage","forwardRef","props","ref","hasThrownError","CLD_OPTIONS","transformationPlugins","prop","imageProps","key","defaultImgKey","imgKey","setImgKey","useState","cldOptions","transformations","getTransformations","t","e","IMAGE_OPTIONS","getCldImageUrl","onError","options","pollForImage","onErrorResult","image","pollForProcessingImage","handleOnError","useCallback","ResolvedImage","Image","React","loaderOptions","cloudinaryLoader","CldImage_default","React","Head","TWITTER_CARD","CldOgImage","excludeTags","twitterTitle","keys","props","alt","options","width","height","ogImageUrl","getCldImageUrl","twitterImageUrl","metaKeys","React","Head","CldOgImage_default","React","React","useState","useEffect","useRef","Script","triggerOnIdle","callback","WIDGET_WATCHED_EVENTS","WIDGET_EVENTS","CldUploadWidget","children","onClose","onError","onOpen","onUpload","options","signatureEndpoint","uploadPreset","props","cloudinary","useRef","widget","signed","error","setError","useState","results","setResults","isScriptLoading","setIsScriptLoading","uploadOptions","checkForCloudName","generateSignature","useEffect","isSuccess","isClosed","handleOnLoad","triggerOnIdle","createWidget","_a","callback","paramsToSign","r","signature","invokeInstanceMethod","method","close","destroy","hide","isDestroyed","isMinimized","isShowing","minimize","open","widgetSource","show","update","instanceMethods","uploadError","uploadResult","widgetEvent","React","Script","e","CldUploadWidget_default","CldUploadButton","className","children","onClick","onError","onOpen","onUpload","onAbort","onBatchCancelled","onClose","onDisplayChanged","onPublicId","onQueuesEnd","onQueuesStart","onRetry","onShowCompleted","onSourceChanged","onSuccess","onTags","onUploadAdded","options","signatureEndpoint","uploadPreset","props","React","CldUploadWidget_default","open","isLoading","handleOnClick","e","CldUploadButton_default","React","useRef","useEffect","Script","Head","parseUrl","constructCloudinaryUrl","getCldVideoUrl","options","config","analytics","_a","_b","cloudName","checkForCloudName","constructCloudinaryUrl","NEXT_CLOUDINARY_ANALYTICS_ID","NEXT_CLOUDINARY_VERSION","NEXT_VERSION","playerInstances","PLAYER_VERSION","CldVideoPlayer","props","autoPlay","autoplay","className","colors","controls","fontFace","height","id","language","languages","logo","loop","muted","onDataLoad","onError","onMetadataLoad","onPause","onPlay","onEnded","poster","src","sourceTypes","transformation","quality","width","otherCldVidPlayerOptions","playerTransformations","publicId","parts","parseUrl","e","cloudinaryRef","useRef","defaultVideoRef","videoRef","defaultPlayerRef","playerRef","playerId","playerClassName","events","handleEvent","event","activeEvent","getPlayerRefs","checkForCloudName","handleOnLoad","logoOptions","autoplayFallback","autoPlayValue","autoplayModeValue","playerOptions","getCldVideoUrl","getCldImageUrl","key","_a","useEffect","React","Head","Script","CldVideoPlayer_default","getCldOgImageUrl","options","getCldImageUrl"]}