/// <reference types="react" />
import { type AnyRouter, type InferBucketPathObject, type InferMetadataObject, type UploadOptions } from '@edgestore/shared';
import { type z } from 'zod';
/**
 * @internal
 * @see https://www.totaltypescript.com/concepts/the-prettify-helper
 */
export type Prettify<TType> = {
    [K in keyof TType]: TType[K];
} & {};
export type BucketFunctions<TRouter extends AnyRouter> = {
    [K in keyof TRouter['buckets']]: {
        upload: (params: z.infer<TRouter['buckets'][K]['_def']['input']> extends never ? {
            file: File;
            onProgressChange?: OnProgressChangeHandler;
            options?: UploadOptions;
        } : {
            file: File;
            input: z.infer<TRouter['buckets'][K]['_def']['input']>;
            onProgressChange?: OnProgressChangeHandler;
            options?: UploadOptions;
        }) => Promise<TRouter['buckets'][K]['_def']['type'] extends 'IMAGE' ? {
            url: string;
            thumbnailUrl: string | null;
            size: number;
            uploadedAt: Date;
            metadata: InferMetadataObject<TRouter['buckets'][K]>;
            path: InferBucketPathObject<TRouter['buckets'][K]>;
            pathOrder: Prettify<keyof InferBucketPathObject<TRouter['buckets'][K]>>[];
        } : {
            url: string;
            size: number;
            uploadedAt: Date;
            metadata: InferMetadataObject<TRouter['buckets'][K]>;
            path: InferBucketPathObject<TRouter['buckets'][K]>;
            pathOrder: Prettify<keyof InferBucketPathObject<TRouter['buckets'][K]>>[];
        }>;
        confirmUpload: (params: {
            url: string;
        }) => Promise<void>;
        delete: (params: {
            url: string;
        }) => Promise<void>;
    };
};
type OnProgressChangeHandler = (progress: number) => void;
export declare function createNextProxy<TRouter extends AnyRouter>({ apiPath, uploadingCountRef, maxConcurrentUploads, }: {
    apiPath: string;
    uploadingCountRef: React.MutableRefObject<number>;
    maxConcurrentUploads?: number;
}): BucketFunctions<TRouter>;
export {};
//# sourceMappingURL=createNextProxy.d.ts.map